
# NOTE: Using Ubuntu to use latest version of GPU Operator, this is for time slicing enable
---
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: gpu
  namespace: karpenter
spec:
  kubeletConfiguration:
    containerRuntime: containerd
  requirements:
    - key: "karpenter.sh/capacity-type"
      operator: In
      values: [ "spot", "on-demand" ]
    - key: "karpenter.k8s.aws/instance-family" # G5 instance types only supports time slicing
      operator: In
      values: ["g5"]
    - key: "karpenter.k8s.aws/instance-size"
      operator: In
      values: [ "2xlarge", "4xlarge", "8xlarge", "16xlarge", "24xlarge" ]
    - key: "kubernetes.io/arch"
      operator: In
      values: ["amd64"]
  providerRef:
    name: gpu
  labels:
    type: karpenter
    provisioner: gpu
    NodeGroupType: gpu
    hub.jupyter.org/node-purpose: user
  taints:
    - key: nvidia.com/gpu
      effect: "NoSchedule"
    - key: hub.jupyter.org/dedicated # According to optimization docs https://z2jh.jupyter.org/en/latest/administrator/optimization.html
      operator: "Equal"
      value: "user"
      effect: "NoSchedule"
  ttlSecondsAfterEmpty: 120 # optional, but never scales down if not set

---
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: gpu
  namespace: karpenter
spec:
  amiFamily: Ubuntu
  blockDeviceMappings:
    - deviceName: /dev/sda1
      ebs:
        volumeSize: 100Gi # Big disk for Notebook instances
        volumeType: gp3
        encrypted: true
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  subnetSelector:
    Name: ${cluster_name}-private*     # Name of the Subnets to spin up the nodes
  securityGroupSelector:                      # required, when not using launchTemplate
    Name: ${cluster_name}-node*     # name of the SecurityGroup to be used with Nodes
  tags:
    InstanceType: "gpu"
    Name: "gpu-karpenter-ts"  # optional, add tags for your own use
